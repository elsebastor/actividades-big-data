# -*- coding: utf-8 -*-
"""rec_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B3TWND3ndY4-Ye4o3RXEKUPw-5bJeR6A
"""

import numpy as np
import pandas as pd

from sklearn.decomposition import TruncatedSVD
from sklearn.preprocessing import StandardScaler

def load_and_transform(user_bets):
    """
    Processes the user bets data to create and normalize a blended score, and constructs a user-tournament matrix.

    Args:
    user_bets (DataFrame): DataFrame containing user_id, tournament_id, amount, and freq fields.

    Returns:
    DataFrame: User-Tournament matrix with users as rows, tournaments as columns, and normalized scores as values.
    """
    # Create a blended score for the recommendation system
    user_bets['score'] = user_bets['amount'] * 0.3 + user_bets['freq'] * 0.7

    # Normalize the blended score
    scaler = StandardScaler()
    user_bets['normalized_score'] = scaler.fit_transform(user_bets[['score']])

    # Create the User-Tournament Matrix
    user_tournament_matrix = user_bets.pivot_table(values='normalized_score', index='user_id', columns='tournament_id', fill_value=0)

    return user_tournament_matrix

import numpy as np
from sklearn.decomposition import TruncatedSVD

def recommend_tournament(UtMx, tournament_id_liked, n_components=20):
    """
    Recommends a single tournament based on SVD and Pearson correlation, with its correlation coefficient.

    Args:
    UtMx (DataFrame): User-Tournament matrix.
    tournament_id_liked (str): Tournament ID that the user likes.
    n_components (int): Number of singular values to keep for dimensionality reduction.

    Returns:
    tuple: Recommended tournament ID and its correlation coefficient.
    """
    # Compute SVD on the transpose of the matrix
    X = UtMx.T
    SVD = TruncatedSVD(n_components=n_components, random_state=1)
    resultant_matrix = SVD.fit_transform(X)

    # Calculate Pearson correlation matrix
    corr_matrix = np.corrcoef(resultant_matrix)

    # Find the index of the tournament the user likes
    tournament_idx = list(UtMx.columns).index(tournament_id_liked)

    # Get correlation of liked tournament with all others
    corr_scores = corr_matrix[tournament_idx]

    # Find the highest recommendation excluding the provided tournament
    recommended_idx = np.argsort(-corr_scores)[1]  # Get index of the next highest correlated tournament

    recommended_id = UtMx.columns[recommended_idx]
    corr_value = corr_scores[recommended_idx]

    return recommended_id, corr_value

user_bets_df = pd.read_csv('/content/rec_system_data.csv')  # Load user bets data from a CSV file
user_tournament_matrix = load_and_transform(user_bets_df)  # Transform data into user-tournament matrix
recommended_tournaments = recommend_tournament(user_tournament_matrix, 'sr:tournament:35')  # Get recommendations
print(recommended_tournaments)